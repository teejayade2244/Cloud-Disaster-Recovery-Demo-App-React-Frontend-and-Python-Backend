name: Backend CI/CD Pipeline
on:
  push:
    branches:
      - master
    paths:
      - 'Backend-app/**' 
      - '.github/workflows/backend-ci-cd.yml' 
  pull_request:
    branches:
      - "*"
    paths:
      - 'Backend-app/**'
      - '.github/workflows/backend-ci-cd.yml'

# Permissions required for OIDC authentication and checking out code
permissions:
  id-token: write 
  contents: read  

jobs:
  build-and-push:
    runs-on: ubuntu-latest 

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4
      
      - name: Checkout Kubernetes Manifests repository
        uses: actions/checkout@v4
        with:
          repository: teejayade2244/AWS-Cloud-Disaster-Recovery-Manifest-Repo 
          ref: master
          token: ${{ secrets.REPO_PAT }} 
          path: AWS-Cloud-Disaster-Recovery-Manifest-Repo

      # --- Configure AWS Credentials using OIDC ---
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE_ARN }} 
          aws-region: eu-west-2 

      # --- Install Python dependencies for scanning (for fs scan if needed) ---
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12' 

      - name: Install Backend Python Dependencies
        working-directory: ./Backend-app 
        run: pip install -r requirements.txt 

      # --- Scan Dependencies for Vulnerabilities (using Trivy FS Scan) ---
      - name: Run Trivy FS Scan for Dependencies
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs' 
          input: './Backend-app'
          format: 'table'
          severity: 'HIGH,CRITICAL' 
          exit-code: 1 

      # --- Docker Build ---
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          aws-region: eu-west-2 

      - name: Build Backend Docker Image
        working-directory: ./Backend-app
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }} 
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

      # --- Verify ECR Access (Pre-push check) ---
      - name: Verify ECR Access
        run: |
          aws ecr describe-repositories --repository-names ${{ vars.ECR_REPOSITORY_NAME }} --region eu-west-2

      # --- Scan Docker Image with Trivy ---
      - name: Run Trivy Image Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:${{ github.sha }} 
          format: 'table'
          severity: 'HIGH,CRITICAL' 
          exit-code: 1
          ignore-unfixed: true 
          vuln-type: 'os,library' 
          security-checks: 'vuln,config,secret' 

      # --- Docker Push to ECR ---
      - name: Push Backend Docker Image to ECR
        working-directory: ./Backend-app
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # --- Get ECR Image URI for next stages (e.g., K8s deployment) ---
      - name: Get ECR Image URI
        id: ecr_image_uri
        run: |
          ECR_URI="${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:${{ github.sha }}"
          echo "ECR_IMAGE_URI=$ECR_URI" >> $GITHUB_OUTPUT

      - name: Setup kubectl
        uses: aws-actions/amazon-eks-setup-kubectl@v1
        with:
          cluster-name: ${{ vars.EKS_CLUSTER_NAME }} 
          aws-region: eu-west-2

      # --- Update Kubernetes Manifest Image in the cloned repository ---
      - name: Update Kubernetes Manifest Image
        id: update_manifest
        run: |
          NEW_IMAGE_URI="${{ steps.ecr_image_uri.outputs.ECR_IMAGE_URI }}"
          OLD_IMAGE_PREFIX="899411341244.dkr.ecr.eu-west-2.amazonaws.com/aura-flow-production-eu-west-2-backend-api:"
          MANIFEST_FILE="AWS-Cloud-Disaster-Recovery-Manifest-Repo/kubernetes/backend.yaml"

          
          if [ ! -f "${MANIFEST_FILE}" ]; then
            echo "Error: Manifest file ${MANIFEST_FILE} not found"
            ls -la AWS-Cloud-Disaster-Recovery-Manifest-Repo/
            ls -la AWS-Cloud-Disaster-Recovery-Manifest-Repo/kubernetes/ || echo "kubernetes directory not found"
            exit 1
          fi

          sed -i "s|image: ${OLD_IMAGE_PREFIX}.*|image: ${NEW_IMAGE_URI}|g" "${MANIFEST_FILE}"

          # Check if the file was modified
          if git -C AWS-Cloud-Disaster-Recovery-Manifest-Repo diff --exit-code "${MANIFEST_FILE}"; then
            echo "::set-output name=file_modified::false"
          else
            echo "::set-output name=file_modified::true"
          fi

      # --- Commit and Push the updated Manifest (Only if modified) ---
      - name: Commit and Push Manifest Changes
        if: steps.update_manifest.outputs.file_modified == 'true'
        run: |
          cd manifest-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add kubernetes/backend.yaml
          git commit -m "chore: Update backend image to ${{ github.sha }} [skip ci]"
          git push origin master
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_PAT }}

      # --- Deploy to EKS Cluster using the now updated manifest (from the repo) ---
      - name: Deploy to EKS
        run: kubectl apply -f AWS-Cloud-Disaster-Recovery-Manifest-Repo/kubernetes/backend.yaml
